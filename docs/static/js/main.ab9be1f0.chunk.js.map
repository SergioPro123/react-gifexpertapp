{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GrifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategy","useState","state","setState","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GrifGridItem","className","src","alt","GifGrid","loading","useEffect","then","imgs","useFetchGifs","GifExpertApp","setCategory","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EAChBC,mBAAS,IADO,mBACnCC,EADmC,KAC5BC,EAD4B,KAe1C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAMK,OAAOC,OAAS,IACtBR,GAAU,SAACS,GAAD,OAAeP,GAAf,mBAAyBO,OACnCN,EAAS,MAIb,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAOU,SAdf,SAACP,GACvBF,EAASE,EAAEQ,OAAOF,a,+BCPbG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DACbC,EADa,iDACmCC,UAClDR,GAFe,+DAIKS,MAAMF,GAJX,cAIbG,EAJa,gBAKIA,EAAUC,OALd,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAe,SAAC,GAAwB,IAAtBb,EAAqB,EAArBA,IAASU,GAAY,EAAhBD,GAAgB,EAAZC,OACpC,OACI,sBAAKI,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZR,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAHyB,mBAC/BhC,EAD+B,KACxBC,EADwB,KAetC,OATAgC,qBAAU,WACNrB,EAAQL,GAAU2B,MAAK,SAACC,GACpBlC,EAAS,CACLkB,KAAMgB,EACNH,SAAS,SAGlB,CAACzB,IAEGP,EDbmBoC,CAAa7B,GAA/BY,EAD6B,EAC7BA,KAAMa,EADuB,EACvBA,QACd,OACI,qCACI,6BAAKzB,IACJyB,GAAW,mBAAGJ,UAAU,mCAAb,wBAER,qBAAKA,UAAU,YAAf,SACKT,EAAKE,KAAI,SAACC,GAAD,OACN,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aEYhCc,EAtBM,WAAM,MAEStC,mBAAS,CAAC,QAFnB,mBAEhBQ,EAFgB,KAEN+B,EAFM,KAOvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaxC,UAAWwC,IACxB,uBAEA,6BACK/B,EAASc,KAAI,SAACd,GAAD,OACV,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCZlCgC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.ab9be1f0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategy }) => {\r\n    const [state, setState] = useState('');\r\n\r\n    const handleChangeInput = (e) => {\r\n        setState(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (state.trim().length > 2) {\r\n            setCategy((category) => [state, ...category]);\r\n            setState('');\r\n        }\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={state} onChange={handleChangeInput} />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategy: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n        category\r\n    )}&limit=10&api_key=HFLk0Df8EQGwMcWQVvzbZLBdzUlv7leQ`;\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        };\r\n    });\r\n    return gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GrifGridItem = ({ url, id, title }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__backInRight\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GrifGridItem } from './GrifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { data, loading } = useFetchGifs(category);\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            {\r\n                <div className=\"card-grid\">\r\n                    {data.map((img) => (\r\n                        <GrifGridItem key={img.id} {...img} />\r\n                    ))}\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then((imgs) => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nconst GifExpertApp = () => {\r\n    // const category = ['PLC', 'Arduino', 'SCADA'];\r\n    const [category, setCategory] = useState(['PLC']);\r\n\r\n    /*const handdleAdd = () => {\r\n        setCategy([...category, 'Nuevo Elemento']);\r\n    }; */\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategy={setCategory} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {category.map((category) => (\r\n                    <GifGrid key={category} category={category} />\r\n                ))}\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}